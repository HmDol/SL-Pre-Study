#----------------------------------------------------------
# lambda 표현식/함수와 함께 자주 사용되는 내장함수들
#----------------------------------------------------------
# - 형식 : lambda 매개변수1, ... , 매개변수n : 실행코드
# - 반환 : return 없어도 항상 자동으로 결과 반환
# - 특징 : 일회용, 이름없는 익명함수
# 
# 
# ---------------------------------------------------------
# 내장함수 map(함수이름, iterable 타입 객체)
# - 기능 : 원소들을 한개씩 꺼내서 지정된 함수에 전달
#         함수 결과를 다시 저장 반환 
# ---------------------------------------------------------
data = '1 2 3 4 5'.split()
print(data) 


## 방법1. for in : 인덱싱용 반복문
for idx in range(len(data)):
    data[idx] = int(data[idx]) ## int('1')
print(f'방법1 : {data}')

## 방법2. list comprehension : int -> str
data = [ str(d) for d in data ]
print(f'방법2 : {data}')

## 방법3. 내장함수(많이 사용되는 기본적인 함수) : map(함수이름, iterable 객체)
data = list(map(int, data)) ## map객체로 반환되기 때문에 형변환 필요!!
print(f'방법3 : {data}')

# ---------------------------------------------------------
# 내장함수 map() & lambda <= 내장함수로 존재하지 않는 기능 기현
#                        <= 재사용이 낮거나/없는 기능의 함수
#                        <= 일회성/일회용
# ---------------------------------------------------------
# 원소*3/3 = 내장함수x
def calc(num) : 
    return (num*3)/3
data = list(map(calc, data)) 
print(f'map & 사용자정의함수 : {data}')

data = list(map(lambda num : (num*3)/3, data)) # 같은 기능, 일회성
print(f'map & lambda : {data}')